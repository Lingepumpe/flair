on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TRANSFORMERS_CACHE: ./cache/transformers
      FLAIR_CACHE_ROOT: ./cache/flair
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      #----------------------------------------------
      #       Try to load cached poetry installation
      #----------------------------------------------
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: |
            ~/.local
            ~/.cache/pypoetry
          key: poetry-0 # increment to reset cache
      #----------------------------------------------
      #       Install poetry if not using cached
      #----------------------------------------------
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
      #----------------------------------------------
      #       Lock dependencies to get fresh versions
      #----------------------------------------------
      - name: Run poetry lock
        run: |
          poetry config virtualenvs.in-project true
          poetry lock
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --no-root
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Cache downloaded models/datasets
        uses: actions/cache@v3
        with:
          path: ./cache
          key: cache-v1.1
      - name: Run tests
        # The import is a workaround for invalid sequences in transformers files. These
        # cause an error when discovered during pytest, but by importing them first we
        # create the import cache and pytest will not discover them while running the
        # tests
        run: |
          source .venv/bin/activate
          python -c 'import transformers.models.distilbert.modeling_distilbert'
          pytest --runintegration --durations=0 -vv
